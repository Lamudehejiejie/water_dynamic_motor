// ============================================================================
// ENCODER TEST PROGRAM
// Test M5Stack 8-Encoder Unit (U-153) with M5Stack CoreS3
// ============================================================================
#include <M5Unified.h>
#include <UNIT_8ENCODER.h>

// ============================================================================
// ENCODER SETUP
// ============================================================================
#define ENCODER_I2C_ADDR 0x41    // Default I2C address for 8-Encoder Unit
UNIT_8ENCODER encoder;           // Create encoder object

// ============================================================================
// SETUP
// ============================================================================
void setup() {
    // Initialize M5Stack hardware
    auto cfg = M5.config();
    M5.begin(cfg);

    // Setup display
    M5.Display.clear();
    M5.Display.setTextSize(2);
    M5.Display.setCursor(10, 10);
    M5.Display.println("8-Encoder Test");

    // ========================================================================
    // INITIALIZE I2C FOR ENCODER
    // ========================================================================
    // M5Stack CoreS3 Port.A: SDA=GPIO2, SCL=GPIO1
    M5.Display.setCursor(10, 40);
    M5.Display.println("Init I2C...");

    Wire.begin(2, 1);  // Initialize I2C with SDA=GPIO2, SCL=GPIO1
    delay(100);

    // ========================================================================
    // SCAN I2C BUS FOR DEVICES
    // ========================================================================
    M5.Display.setCursor(10, 70);
    M5.Display.println("Scanning I2C...");

    int deviceCount = 0;
    uint8_t foundAddresses[10];  // Store up to 10 addresses

    for (uint8_t addr = 1; addr < 127; addr++) {
        Wire.beginTransmission(addr);
        uint8_t error = Wire.endTransmission();

        if (error == 0 && deviceCount < 10) {
            foundAddresses[deviceCount] = addr;
            deviceCount++;
        }
    }

    M5.Display.setCursor(10, 100);
    if (deviceCount == 0) {
        M5.Display.println("No I2C devices!");
    } else {
        M5.Display.printf("Found %d device(s):", deviceCount);
        for (int i = 0; i < deviceCount; i++) {
            M5.Display.setCursor(10, 130 + i * 25);
            M5.Display.printf("0x%02X", foundAddresses[i]);
        }
    }

    delay(3000);

    // ========================================================================
    // INITIALIZE 8-ENCODER UNIT
    // ========================================================================
    M5.Display.clear();
    M5.Display.setCursor(10, 10);
    M5.Display.println("8-Encoder Test");

    M5.Display.setCursor(10, 40);
    M5.Display.printf("Try addr 0x%02X", ENCODER_I2C_ADDR);

    // Try different I2C addresses if 0x41 doesn't work
    bool encoder_found = false;
    uint8_t working_addr = 0;

    // Try the default address first
    if (encoder.begin(&Wire, ENCODER_I2C_ADDR, 2, 1)) {
        encoder_found = true;
        working_addr = ENCODER_I2C_ADDR;
    } else {
        // Try scanning for encoder at other common addresses
        uint8_t test_addrs[] = {0x40, 0x42, 0x43, 0x44, 0x45};
        for (uint8_t i = 0; i < 5; i++) {
            if (encoder.begin(&Wire, test_addrs[i], 2, 1)) {
                encoder_found = true;
                working_addr = test_addrs[i];
                break;
            }
        }
    }

    M5.Display.setCursor(10, 70);
    if (encoder_found) {
        M5.Display.println("Encoder OK!");
        M5.Display.setCursor(10, 100);
        M5.Display.printf("Addr: 0x%02X", working_addr);

        // Get firmware version
        uint8_t fw_version = encoder.getFirmwareVersion();
        M5.Display.setCursor(10, 130);
        M5.Display.printf("FW Ver: %d", fw_version);
    } else {
        M5.Display.println("Encoder FAIL!");
        M5.Display.setCursor(10, 100);
        M5.Display.println("Check:");
        M5.Display.setCursor(10, 130);
        M5.Display.println("- Port.A cable");
        M5.Display.setCursor(10, 160);
        M5.Display.println("- Power to encoder");
    }

    delay(3000);
}

// ============================================================================
// LOOP
// ============================================================================
void loop() {
    M5.update();

    M5.Display.clear();
    M5.Display.setCursor(10, 10);
    M5.Display.println("8-Encoder Live Test");
    M5.Display.println("-------------------");

    // Read switch status
    bool switch_status = encoder.getSwitchStatus();
    M5.Display.setCursor(10, 70);
    M5.Display.printf("Switch: %s", switch_status ? "PRESSED" : "RELEASED");

    // Read all 8 encoder channels
    for (uint8_t i = 0; i < 8; i++) {
        int32_t value = encoder.getEncoderValue(i);
        bool button = encoder.getButtonStatus(i);

        M5.Display.setCursor(10, 100 + i * 25);
        M5.Display.printf("CH%d: %6ld %s",
            i + 1,
            value,
            button ? "[BTN]" : "     ");
    }

    delay(100);  // Update 10 times per second
}
